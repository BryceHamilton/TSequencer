{"version":3,"sources":["components/step.tsx","components/sequencer.tsx","tools/audioBufferWrapper.ts","components/sequencerContainer.tsx","components/root.tsx","serviceWorker.ts","index.tsx"],"names":["Step","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","activated","state","setState","toggleFunc","id","_this$props","step","className","react","onClick","React","Sequencer","steps","volumeChange","e","volume","parseInt","currentTarget","value","DEFAULT_VOLUME","panChange","pan","parseFloat","DEFAULT_PAN","handleDragOver","preventDefault","handleDrop","stopPropagation","dataTransfer","files","length","file","audio","updateSoundWithFile","Array","numSteps","fill","toPlay","prevStep","bind","assertThisInitialized","_this2","play","onDragOver","onDrop","map","index","components_step","key","concat","filename","type","min","max","defaultValue","onInput","onChange","AudioBufferWrapper","audioContext","audioUrl","buffer","gainNode","panNode","split","slice","createGain","createStereoPanner","connect","destination","loadSoundByHttp","request","XMLHttpRequest","open","responseType","onload","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","response","decodeAudioData","sent","t0","console","error","message","stop","send","name","endsWith","fr","FileReader","_callee2","data","_context2","result","readAsArrayBuffer","gain","source","createBufferSource","start","AUDIO_ARRAY","SequencerContainer","timer","updateBPM","bpm","interval","Math","ceil","clearInterval","window","setInterval","tick","audioRefs","NUM_STEPS","sequencers","i","numSequencers","push","components_sequencer","Root","bpmChange","DEFAULT_BPM","AudioContext","react_default","createElement","sequencerContainer","NUM_SEQUENCERS","Component","Boolean","location","hostname","match","ReactDOM","render","components_root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ad679ba.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { Component } from \"react\";\nimport \"../css/step.css\";\n\nexport interface StepProps {\n  id: number;\n  step: number;\n  toggleFunc: (id: number, activated: boolean) => void;\n}\n\nexport interface StepState {\n  activated: boolean;\n}\n\nclass Step extends React.Component<StepProps, StepState> {\n  constructor(props: StepProps) {\n    super(props);\n\n    this.state = {\n      activated: false\n    };\n  }\n\n  toggle = () => {\n    const activated = !this.state.activated;\n    this.setState({ activated });\n    this.props.toggleFunc(this.props.id, activated);\n  };\n\n  render() {\n    const { id, step } = this.props;\n    const { activated } = this.state;\n    let className = \"\";\n\n    if (step === id) className = \"step\";\n    else if (activated) className = \"ena\";\n    else className = \"dis\";\n\n    return <div className={className} onClick={this.toggle} />;\n  }\n}\n\nexport default Step;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport Step from \"./step\";\nimport \"../css/sequencer.css\";\nimport AudioBufferWrapper from \"../tools/audioBufferWrapper\";\n\nexport interface SequencerProps {\n  id: number;\n  step: number;\n  numSteps: number;\n  audio: AudioBufferWrapper;\n}\n\nexport interface SequencerState {\n  steps: boolean[];\n  toPlay: boolean;\n  prevStep: number;\n  volume: number;\n  pan: number;\n}\n\nclass Sequencer extends React.Component<SequencerProps, SequencerState> {\n  static readonly DEFAULT_VOLUME = 100;\n  static readonly DEFAULT_PAN = 0;\n\n  constructor(props: SequencerProps) {\n    super(props);\n\n    const steps = new Array(props.numSteps).fill(false);\n\n    this.state = {\n      steps,\n      toPlay: false,\n      prevStep: this.props.step,\n      volume: Sequencer.DEFAULT_VOLUME,\n      pan: Sequencer.DEFAULT_PAN\n    };\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle = (id: number, activated: boolean) => {\n    let { steps } = this.state;\n    steps[id] = activated;\n    this.setState({ steps });\n  };\n\n  volumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const volume = parseInt(e.currentTarget.value) || Sequencer.DEFAULT_VOLUME;\n    this.setState({ volume });\n  };\n\n  panChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const pan = parseFloat(e.currentTarget.value) || Sequencer.DEFAULT_PAN;\n    this.setState({ pan });\n  };\n\n  handleDragOver = (e: React.DragEvent<HTMLInputElement>) => {\n    e.preventDefault();\n  };\n\n  handleDrop = (e: React.DragEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (e.dataTransfer.files.length !== 0) {\n      //TODO: Handle the rest of the files\n      const file: File = e.dataTransfer.files[0];\n      this.props.audio.updateSoundWithFile(file);\n    }\n  };\n\n  render() {\n    let className = \"sequencer\";\n\n    if (\n      this.state.steps[this.props.step] &&\n      this.props.step !== this.state.prevStep\n    ) {\n      className = \"seqActive\";\n      this.setState({ prevStep: this.props.step });\n      this.props.audio.play(this.state.volume, this.state.pan);\n    }\n\n    return (\n      <div\n        className={className}\n        onDragOver={this.handleDragOver}\n        onDrop={this.handleDrop}\n      >\n        {this.state.steps.map((step, index) => (\n          <Step\n            key={`${this.props.id}${index}`}\n            id={index}\n            step={this.props.step}\n            toggleFunc={this.toggle}\n          />\n        ))}\n        <div>\n          <span>{this.props.audio.filename}</span>\n          <input\n            className=\"slider\"\n            type=\"range\"\n            min=\"1\"\n            max=\"100\"\n            defaultValue=\"100\"\n            id=\"volumeSlider\"\n            onInput={this.volumeChange}\n          />\n          <input\n            className=\"slider\"\n            type=\"range\"\n            step=\".1\"\n            min=\"-1\"\n            max=\"1\"\n            defaultValue=\"0\"\n            id=\"panSlider\"\n            onChange={this.panChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sequencer;\n","class AudioBufferWrapper {\n  audioContext: AudioContext;\n  filename: string;\n  buffer: AudioBuffer | null = null;\n  gainNode: GainNode;\n  panNode: StereoPannerNode;\n\n  constructor(audioContext: AudioContext, audioUrl: string) {\n    this.audioContext = audioContext;\n    this.filename = audioUrl.split('/').slice(-1)[0];\n\n    this.gainNode = audioContext.createGain();\n    this.panNode = audioContext.createStereoPanner();\n\n    this.panNode.connect(this.gainNode);\n    this.gainNode.connect(audioContext.destination);\n\n    this.loadSoundByHttp(audioUrl);\n  }\n\n  loadSoundByHttp(audioUrl: string): void {\n    let request = new XMLHttpRequest();\n    request.open('GET', audioUrl, true);\n    request.responseType = 'arraybuffer';\n\n    request.onload = async () => {\n      let audio = request.response;\n\n      try {\n        this.buffer = await this.audioContext.decodeAudioData(audio);\n      } catch (e) {\n        console.error(\n          `Error with decoding audio from ${audioUrl}, ${e.message}`\n        );\n      }\n    };\n\n    request.send();\n  }\n\n  updateSoundWithFile(file: File) {\n    if (!file.name.endsWith('.wav')) return;\n\n    const fr = new FileReader();\n\n    fr.onload = async () => {\n      const data = fr.result as ArrayBuffer;\n\n      try {\n        this.buffer = await this.audioContext.decodeAudioData(data);\n        this.filename = file.name;\n      } catch (e) {\n        console.error(\n          `Error with decoding audio from ${file.name}, ${e.message}`\n        );\n      }\n    };\n\n    fr.readAsArrayBuffer(file);\n  }\n\n  play(volume: number, pan: number): void {\n    if (this.buffer == null)\n      console.error(`Buffer is null for ${this.filename}`);\n\n    this.gainNode.gain.value = volume / 100;\n    this.panNode.pan.value = pan;\n\n    //TODO: Prepare a source node for play after one is played for the next iteration. To reduce latency when playing\n    let source = this.audioContext.createBufferSource();\n    source.buffer = this.buffer;\n    source.connect(this.panNode);\n    source.start(0);\n  }\n}\n\nexport default AudioBufferWrapper;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport Sequencer from \"./sequencer\";\nimport AudioBufferWrapper from \"../tools/audioBufferWrapper\";\n\nconst AUDIO_ARRAY = [\n  \"clap01.wav\",\n  \"clap02.wav\",\n  \"closedhat01.wav\",\n  \"closedhat02.wav\",\n  \"drop.wav\",\n  \"kick01.wav\",\n  \"kick02.wav\",\n  \"laser.wav\",\n  \"openhat01.wav\",\n  \"openhat02.wav\",\n  \"snare01.wav\",\n  \"snare02.wav\",\n  \"tom01.wav\",\n  \"tom02.wav\",\n  \"tom03.wav\"\n];\n\nexport interface SequencerContainerProps {\n  bpm: number;\n  numSequencers: number;\n  audioContext: AudioContext;\n}\n\nexport interface SequencerContainerState {\n  step: number;\n  interval: number;\n  audioRefs: AudioBufferWrapper[];\n  bpm: number;\n}\n\nclass SequencerContainer extends React.Component<\n  SequencerContainerProps,\n  SequencerContainerState\n> {\n  static readonly NUM_STEPS = 64;\n\n  timer: number = 0;\n\n  constructor(props: SequencerContainerProps) {\n    super(props);\n\n    const { bpm } = props;\n\n    let audioRefs = AUDIO_ARRAY.map(\n      filename =>\n        new AudioBufferWrapper(this.props.audioContext, `/audio/${filename}`)\n    );\n\n    this.state = {\n      step: 0,\n      interval: Math.ceil((60 * 1000) / bpm),\n      audioRefs,\n      bpm\n    };\n  }\n\n  tick() {\n    const step = (this.state.step + 1) % SequencerContainer.NUM_STEPS;\n\n    this.setState({\n      step\n    });\n  }\n\n  componentDidMount() {\n    this.timer = window.setInterval(() => {\n      this.tick();\n    }, this.state.interval);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  updateBPM = () => {\n    const { bpm } = this.props;\n    this.setState({ bpm, interval: Math.ceil((60 * 1000) / bpm) });\n\n    clearInterval(this.timer);\n\n    this.timer = window.setInterval(() => {\n      this.tick();\n    }, this.state.interval);\n  };\n\n  render() {\n    if (this.props.bpm !== this.state.bpm) {\n      this.updateBPM();\n    }\n\n    let sequencers: JSX.Element[] = [];\n\n    for (let i = 0; i < this.props.numSequencers; i++) {\n      const audio = this.state.audioRefs[i % this.state.audioRefs.length];\n\n      sequencers.push(\n        <Sequencer\n          key={i}\n          id={i}\n          numSteps={SequencerContainer.NUM_STEPS}\n          step={this.state.step}\n          audio={audio}\n        />\n      );\n    }\n\n    return sequencers;\n  }\n}\n\nexport default SequencerContainer;\n","import React from \"react\";\nimport { Component } from \"react\";\nimport SequencerContainer from \"./sequencerContainer\";\nimport \"../css/root.css\";\n\nexport interface RootProps {}\n\nexport interface RootState {\n  audioContext: AudioContext;\n  bpm: number;\n}\n\nclass Root extends React.Component<RootProps, RootState> {\n  static readonly DEFAULT_BPM = 120;\n  static readonly NUM_SEQUENCERS = 15;\n\n  constructor(props: RootProps) {\n    super(props);\n\n    this.state = {\n      bpm: Root.DEFAULT_BPM,\n      audioContext: new AudioContext()\n    };\n\n    this.bpmChange = this.bpmChange.bind(this);\n  }\n\n  bpmChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const bpm = parseInt(e.currentTarget.value) || 120;\n    this.setState({ bpm });\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          {this.state.bpm + \"bpm\"}\n          <input\n            className=\"bpmslider\"\n            type=\"range\"\n            min=\"30\"\n            max=\"600\"\n            defaultValue=\"120\"\n            onChange={this.bpmChange}\n          />\n        </div>\n\n        <SequencerContainer\n          key=\"SequencerContainer\"\n          bpm={this.state.bpm}\n          numSequencers={Root.NUM_SEQUENCERS}\n          audioContext={this.state.audioContext}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport Root from \"./components/root\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}